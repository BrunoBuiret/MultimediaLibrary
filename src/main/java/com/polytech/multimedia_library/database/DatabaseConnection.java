package com.polytech.multimedia_library.database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

/**
 * @author Bruno Buiret <bruno.buiret@etu.univ-lyon1.fr>
 */
public class DatabaseConnection
{
    /**
     * The unique instance of this class.
     */
    protected static DatabaseConnection instance = null;
    
    /**
     * The actual connection to the database.
     */
    protected Connection connection = null;
    
    /**
     * Prevents this class from being instantiated outside of this file.
     * @throws javax.naming.NamingException If the context can't be read.
     * @throws java.sql.SQLException If an SQL error happens.
     */
    protected DatabaseConnection()
    throws NamingException, SQLException
    {
        Context globalContext = new InitialContext();
        Context environmentContext = (Context) globalContext.lookup("java:comp/env");
        DataSource dataSource = (DataSource) environmentContext.lookup("jdbc/DSOeuvre");

        this.connection = dataSource.getConnection();
    }
    
    /**
     * Gets a unique instance of this class.
     * 
     * @return The unique instance of this class.
     * @throws javax.naming.NamingException
     * @throws java.sql.SQLException
     */
    public static DatabaseConnection getInstance()
    throws NamingException, SQLException
    {
        if(null == DatabaseConnection.instance)
        {
            DatabaseConnection.instance = new DatabaseConnection();
        }
        
        return DatabaseConnection.instance;
    }
    
    /**
     * 
     * @param query
     * @return 
     * @throws java.sql.SQLException 
     */
    public PreparedStatement prepare(String query)
    throws SQLException
    {
        return this.connection.prepareStatement(query);
    }
    
    /**
     * 
     * @param query
     * @param autoGeneratedKeys
     * @return 
     * @throws java.sql.SQLException 
     */
    public PreparedStatement prepare(String query, int autoGeneratedKeys)
    throws SQLException
    {
        return this.connection.prepareStatement(query, autoGeneratedKeys);
    }
    
    /**
     * Begins a transaction.
     * 
     * @throws SQLException 
     */
    public void beginTransaction()
    throws SQLException
    {
        this.connection.setAutoCommit(false);
    }
    
    /**
     * Ends a transaction by committing it.
     * 
     * @throws SQLException 
     */
    public void endTransaction()
    throws SQLException
    {
        this.connection.commit();
        this.connection.setAutoCommit(true);
    }
    
    /**
     * Ends a transaction by roll backing.
     * 
     * @throws SQLException 
     */
    public void cancelTransaction()
    throws SQLException
    {
        this.connection.rollback();
        this.connection.setAutoCommit(true);
    }
}
